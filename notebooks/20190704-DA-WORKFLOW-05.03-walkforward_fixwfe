{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import datetime\n",
    "import os.path\n",
    "import backtrader as bt\n",
    "import numpy as np\n",
    "from pprint import pformat\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Strategy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Stratey\n",
    "class TestStrategy(bt.Strategy):\n",
    "    params = (\n",
    "        ('maperiod', 15),\n",
    "        ('printlog', False),\n",
    "    )\n",
    "\n",
    "    def log(self, txt, dt=None, doprint=False):\n",
    "        ''' Logging function fot this strategy'''\n",
    "        if self.params.printlog or doprint:\n",
    "            dt = dt or self.datas[0].datetime.date(0)\n",
    "            print('%s, %s' % (dt.isoformat(), txt))\n",
    "\n",
    "    def __init__(self):\n",
    "        # Keep a reference to the \"close\" line in the data[0] dataseries\n",
    "        self.dataclose = self.datas[0].close\n",
    "\n",
    "        # To keep track of pending orders and buy price/commission\n",
    "        self.order = None\n",
    "        self.buyprice = None\n",
    "        self.buycomm = None\n",
    "\n",
    "        # Add a MovingAverageSimple indicator\n",
    "        self.sma = bt.indicators.SimpleMovingAverage(\n",
    "            self.datas[0], period=self.params.maperiod)\n",
    "\n",
    "    def notify_order(self, order):\n",
    "        if order.status in [order.Submitted, order.Accepted]:\n",
    "            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n",
    "            return\n",
    "\n",
    "        # Check if an order has been completed\n",
    "        # Attention: broker could reject order if not enough cash\n",
    "        if order.status in [order.Completed]:\n",
    "            if order.isbuy():\n",
    "                self.log(\n",
    "                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n",
    "                    (order.executed.price,\n",
    "                     order.executed.value,\n",
    "                     order.executed.comm))\n",
    "\n",
    "                self.buyprice = order.executed.price\n",
    "                self.buycomm = order.executed.comm\n",
    "            else:  # Sell\n",
    "                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n",
    "                         (order.executed.price,\n",
    "                          order.executed.value,\n",
    "                          order.executed.comm))\n",
    "\n",
    "            self.bar_executed = len(self)\n",
    "\n",
    "        elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n",
    "            self.log('Order Canceled/Margin/Rejected')\n",
    "\n",
    "        # Write down: no pending order\n",
    "        self.order = None\n",
    "\n",
    "    def notify_trade(self, trade):\n",
    "        if not trade.isclosed:\n",
    "            return\n",
    "\n",
    "        self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' %\n",
    "                 (trade.pnl, trade.pnlcomm))\n",
    "\n",
    "    def next(self):\n",
    "        # Simply log the closing price of the series from the reference\n",
    "        self.log('Close, %.2f' % self.dataclose[0])\n",
    "\n",
    "        # Check if an order is pending ... if yes, we cannot send a 2nd one\n",
    "        if self.order:\n",
    "            return\n",
    "\n",
    "        # Check if we are in the market\n",
    "        if not self.position:\n",
    "\n",
    "            # Not yet ... we MIGHT BUY if ...\n",
    "            if self.dataclose[0] > self.sma[0]:\n",
    "\n",
    "                # BUY, BUY, BUY!!! (with all possible default parameters)\n",
    "                self.log('BUY CREATE, %.2f' % self.dataclose[0])\n",
    "\n",
    "                # Keep track of the created order to avoid a 2nd order\n",
    "                self.order = self.buy()\n",
    "\n",
    "        else:\n",
    "\n",
    "            if self.dataclose[0] < self.sma[0]:\n",
    "                # SELL, SELL, SELL!!! (with all possible default parameters)\n",
    "                self.log('SELL CREATE, %.2f' % self.dataclose[0])\n",
    "\n",
    "                # Keep track of the created order to avoid a 2nd order\n",
    "                self.order = self.sell()\n",
    "\n",
    "    def stop(self):\n",
    "        self.log('maperiod:%2d, %.2f' %\n",
    "                 (self.params.maperiod, self.broker.getvalue()), doprint=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DecisiveAnalyzer(bt.Analyzer):\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.maperiod = self.strategy.params.maperiod\n",
    "        self.equity = []\n",
    "\n",
    "    def start(self):\n",
    "        # Not needed ... but could be used\n",
    "        self.init_cash = self.strategy.broker.cash \n",
    "        self.ntrade = 0\n",
    "\n",
    "    def next(self):\n",
    "        # Not needed ... but could be used\n",
    "        pass\n",
    "\n",
    "    def notify_trade(self, trade):\n",
    "\n",
    "        if trade.isclosed:\n",
    "            self.equity.append({'dt': self.strategy.datetime.datetime(), \n",
    "                                'equity': self.strategy.broker.getvalue()})\n",
    "            self.ntrade += 1\n",
    "            \n",
    "    def stop(self):\n",
    "        self.final_cash = self.strategy.broker.cash\n",
    "        self.final_val = self.strategy.broker.get_value()\n",
    "\n",
    "    def get_analysis(self):\n",
    "        equity = np.asarray([self.init_cash,] + self.equity)\n",
    "\n",
    "        outp = {\n",
    "            'params': (self.maperiod),\n",
    "            'profit': self.final_val - self.init_cash,\n",
    "            'ntrade': self.ntrade,\n",
    "#             'trades': np.diff(equity).tolist(),\n",
    "            'equity': self.equity,\n",
    "        }\n",
    "        \n",
    "        return outp\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def best_result_from_cerebro_opti_run(result):\n",
    "    params  = []\n",
    "    n_trades = []\n",
    "    profit   = []\n",
    "    trades   = []\n",
    "    for res in result:\n",
    "        r = res[0].analyzers.decisive.get_analysis()\n",
    "        params.append(r['params'])\n",
    "        n_trades.append(r['ntrade'])\n",
    "        profit.append(r['profit'])\n",
    "        trades.append(r['trades'])\n",
    "\n",
    "    prof_ind = np.argmax(profit) \n",
    "    best_params = params[prof_ind]\n",
    "    best_profit = profit[prof_ind]\n",
    "    best_ntrades = n_trades[prof_ind]\n",
    "    best_trades = trades[prof_ind]\n",
    "    \n",
    "    print('best:{} profit:{} trades:{}'.format(best_params, best_profit, best_ntrades))\n",
    "    return (best_params, best_profit, best_ntrades, best_trades)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11a7367b8>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fname_symbol = 'CL'\n",
    "folder_name = '5min'\n",
    "suffix = '5min_20160103_20190405'\n",
    "\n",
    "df = pd.read_parquet(os.path.join('../data/processed/{}/'.format(folder_name), '{}_{}.parquet'.format(fname_symbol, suffix)))\n",
    "df = (df.resample('4h', label='left', base=18).agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'}))\n",
    "df.columns = [col_name.lower() for col_name in df.columns]\n",
    "df = df.dropna()\n",
    "df['2017-01-01':'2017-04-01']['close'].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-sample Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "periods = [\n",
    "{'run': 0, 'oos': ('2017-04-01', '2017-05-01'), 'is': ('2017-01-01', '2017-04-01')},\n",
    "{'run': 1, 'oos': ('2017-05-01', '2017-06-01'), 'is': ('2017-02-01', '2017-05-01')},\n",
    "{'run': 2, 'oos': ('2017-06-01', '2017-07-01'), 'is': ('2017-03-01', '2017-06-01')},\n",
    "{'run': 3, 'oos': ('2017-07-01', '2017-08-01'), 'is': ('2017-04-01', '2017-07-01')},\n",
    "{'run': 4, 'oos': ('2017-08-01', '2017-09-01'), 'is': ('2017-05-01', '2017-08-01')},\n",
    "{'run': 5, 'oos': ('2017-09-01', '2017-10-01'), 'is': ('2017-06-01', '2017-09-01')},\n",
    "{'run': 6, 'oos': ('2017-10-01', '2017-11-01'), 'is': ('2017-07-01', '2017-10-01')},\n",
    "{'run': 7, 'oos': ('2017-11-01', '2017-12-01'), 'is': ('2017-08-01', '2017-11-01')},\n",
    "{'run': 8, 'oos': ('2017-12-01', '2018-01-01'), 'is': ('2017-09-01', '2017-12-01')},\n",
    "{'run': 9, 'oos': ('2018-01-01', '2018-02-01'), 'is': ('2017-10-01', '2018-01-01')},\n",
    "{'run': 10, 'oos': ('2018-02-01', '2018-03-01'), 'is': ('2017-11-01', '2018-02-01')},\n",
    "{'run': 11, 'oos': ('2018-03-01', '2018-04-01'), 'is': ('2017-12-01', '2018-03-01')},\n",
    "{'run': 12, 'oos': ('2018-04-01', '2018-05-01'), 'is': ('2018-01-01', '2018-04-01')},\n",
    "{'run': 13, 'oos': ('2018-05-01', '2018-06-01'), 'is': ('2018-02-01', '2018-05-01')},\n",
    "\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start/End: 2017-01-01 - 2018-05-01\n",
      "2018-05-01, maperiod:10, 105030.00\n",
      "2018-05-01, maperiod:15, 110860.00\n",
      "2018-05-01, maperiod:20, 106930.00\n",
      "2018-05-01, maperiod:25, 108470.00\n",
      "2018-05-01, maperiod:30, 110390.00\n",
      "{'params': 10, 'profit': 5030.0, 'ntrade': 160, 'equity': [{'dt': datetime.datetime(2017, 1, 8, 18, 0), 'equity': 100500.0}, {'dt': datetime.datetime(2017, 1, 13, 6, 0), 'equity': 100350.0}, {'dt': datetime.datetime(2017, 1, 13, 14, 0), 'equity': 99910.0}, {'dt': datetime.datetime(2017, 1, 17, 2, 0), 'equity': 99660.0}, {'dt': datetime.datetime(2017, 1, 17, 18, 0), 'equity': 98310.0}, {'dt': datetime.datetime(2017, 1, 18, 2, 0), 'equity': 98280.0}, {'dt': datetime.datetime(2017, 1, 23, 6, 0), 'equity': 98040.0}, {'dt': datetime.datetime(2017, 1, 23, 18, 0), 'equity': 97980.0}, {'dt': datetime.datetime(2017, 1, 25, 6, 0), 'equity': 97570.0}, {'dt': datetime.datetime(2017, 1, 25, 18, 0), 'equity': 97540.0}, {'dt': datetime.datetime(2017, 1, 26, 6, 0), 'equity': 97210.0}, {'dt': datetime.datetime(2017, 1, 27, 6, 0), 'equity': 96750.0}, {'dt': datetime.datetime(2017, 1, 30, 10, 0), 'equity': 96140.0}, {'dt': datetime.datetime(2017, 1, 31, 22, 0), 'equity': 95590.0}, {'dt': datetime.datetime(2017, 2, 3, 10, 0), 'equity': 96500.0}, {'dt': datetime.datetime(2017, 2, 6, 10, 0), 'equity': 96410.0}, {'dt': datetime.datetime(2017, 2, 13, 10, 0), 'equity': 97190.0}, {'dt': datetime.datetime(2017, 2, 14, 18, 0), 'equity': 96860.0}, {'dt': datetime.datetime(2017, 2, 15, 18, 0), 'equity': 96720.0}, {'dt': datetime.datetime(2017, 2, 17, 6, 0), 'equity': 96720.0}, {'dt': datetime.datetime(2017, 2, 22, 6, 0), 'equity': 96830.0}, {'dt': datetime.datetime(2017, 2, 24, 6, 0), 'equity': 96640.0}, {'dt': datetime.datetime(2017, 2, 27, 14, 0), 'equity': 96510.0}, {'dt': datetime.datetime(2017, 3, 1, 2, 0), 'equity': 96370.0}, {'dt': datetime.datetime(2017, 3, 1, 14, 0), 'equity': 96110.0}, {'dt': datetime.datetime(2017, 3, 7, 2, 0), 'equity': 96020.0}, {'dt': datetime.datetime(2017, 3, 7, 14, 0), 'equity': 95850.0}, {'dt': datetime.datetime(2017, 3, 14, 10, 0), 'equity': 94820.0}, {'dt': datetime.datetime(2017, 3, 16, 10, 0), 'equity': 94830.0}, {'dt': datetime.datetime(2017, 3, 16, 18, 0), 'equity': 94750.0}, {'dt': datetime.datetime(2017, 3, 17, 2, 0), 'equity': 94700.0}, {'dt': datetime.datetime(2017, 3, 17, 14, 0), 'equity': 94440.0}, {'dt': datetime.datetime(2017, 3, 21, 10, 0), 'equity': 94250.0}, {'dt': datetime.datetime(2017, 3, 23, 10, 0), 'equity': 93560.0}, {'dt': datetime.datetime(2017, 3, 26, 22, 0), 'equity': 93290.0}, {'dt': datetime.datetime(2017, 4, 3, 14, 0), 'equity': 95730.0}, {'dt': datetime.datetime(2017, 4, 5, 18, 0), 'equity': 95920.0}, {'dt': datetime.datetime(2017, 4, 12, 14, 0), 'equity': 97500.0}, {'dt': datetime.datetime(2017, 4, 17, 14, 0), 'equity': 97150.0}, {'dt': datetime.datetime(2017, 4, 19, 14, 0), 'equity': 95440.0}, {'dt': datetime.datetime(2017, 4, 26, 10, 0), 'equity': 95250.0}, {'dt': datetime.datetime(2017, 4, 26, 18, 0), 'equity': 94690.0}, {'dt': datetime.datetime(2017, 4, 27, 2, 0), 'equity': 94670.0}, {'dt': datetime.datetime(2017, 4, 30, 18, 0), 'equity': 94520.0}, {'dt': datetime.datetime(2017, 5, 1, 2, 0), 'equity': 94530.0}, {'dt': datetime.datetime(2017, 5, 2, 10, 0), 'equity': 94240.0}, {'dt': datetime.datetime(2017, 5, 9, 2, 0), 'equity': 94380.0}, {'dt': datetime.datetime(2017, 5, 12, 6, 0), 'equity': 95770.0}, {'dt': datetime.datetime(2017, 5, 12, 14, 0), 'equity': 95620.0}, {'dt': datetime.datetime(2017, 5, 16, 14, 0), 'equity': 96540.0}, {'dt': datetime.datetime(2017, 5, 18, 6, 0), 'equity': 95880.0}, {'dt': datetime.datetime(2017, 5, 23, 2, 0), 'equity': 97650.0}, {'dt': datetime.datetime(2017, 5, 24, 14, 0), 'equity': 97760.0}, {'dt': datetime.datetime(2017, 5, 25, 6, 0), 'equity': 96830.0}, {'dt': datetime.datetime(2017, 5, 30, 6, 0), 'equity': 96440.0}, {'dt': datetime.datetime(2017, 6, 1, 18, 0), 'equity': 95550.0}, {'dt': datetime.datetime(2017, 6, 5, 6, 0), 'equity': 95110.0}, {'dt': datetime.datetime(2017, 6, 7, 14, 0), 'equity': 93130.0}, {'dt': datetime.datetime(2017, 6, 9, 10, 0), 'equity': 93060.0}, {'dt': datetime.datetime(2017, 6, 12, 18, 0), 'equity': 93150.0}, {'dt': datetime.datetime(2017, 6, 13, 10, 0), 'equity': 92800.0}, {'dt': datetime.datetime(2017, 6, 13, 18, 0), 'equity': 92450.0}, {'dt': datetime.datetime(2017, 6, 18, 22, 0), 'equity': 92330.0}, {'dt': datetime.datetime(2017, 6, 19, 14, 0), 'equity': 92190.0}, {'dt': datetime.datetime(2017, 6, 23, 10, 0), 'equity': 92000.0}, {'dt': datetime.datetime(2017, 7, 5, 6, 0), 'equity': 95330.0}, {'dt': datetime.datetime(2017, 7, 11, 6, 0), 'equity': 94930.0}, {'dt': datetime.datetime(2017, 7, 12, 22, 0), 'equity': 95940.0}, {'dt': datetime.datetime(2017, 7, 17, 14, 0), 'equity': 96230.0}, {'dt': datetime.datetime(2017, 7, 18, 14, 0), 'equity': 95840.0}, {'dt': datetime.datetime(2017, 7, 20, 14, 0), 'equity': 96400.0}, {'dt': datetime.datetime(2017, 7, 31, 10, 0), 'equity': 99330.0}, {'dt': datetime.datetime(2017, 8, 1, 10, 0), 'equity': 99250.0}, {'dt': datetime.datetime(2017, 8, 3, 14, 0), 'equity': 99120.0}, {'dt': datetime.datetime(2017, 8, 7, 6, 0), 'equity': 98610.0}, {'dt': datetime.datetime(2017, 8, 8, 2, 0), 'equity': 98660.0}, {'dt': datetime.datetime(2017, 8, 8, 10, 0), 'equity': 98050.0}, {'dt': datetime.datetime(2017, 8, 10, 14, 0), 'equity': 97430.0}, {'dt': datetime.datetime(2017, 8, 14, 14, 0), 'equity': 96530.0}, {'dt': datetime.datetime(2017, 8, 16, 14, 0), 'equity': 95630.0}, {'dt': datetime.datetime(2017, 8, 18, 10, 0), 'equity': 95460.0}, {'dt': datetime.datetime(2017, 8, 21, 14, 0), 'equity': 94260.0}, {'dt': datetime.datetime(2017, 8, 22, 14, 0), 'equity': 93910.0}, {'dt': datetime.datetime(2017, 8, 24, 10, 0), 'equity': 93360.0}, {'dt': datetime.datetime(2017, 8, 27, 22, 0), 'equity': 93170.0}, {'dt': datetime.datetime(2017, 9, 7, 10, 0), 'equity': 95500.0}, {'dt': datetime.datetime(2017, 9, 8, 6, 0), 'equity': 95350.0}, {'dt': datetime.datetime(2017, 9, 18, 6, 0), 'equity': 97010.0}, {'dt': datetime.datetime(2017, 9, 19, 14, 0), 'equity': 96110.0}, {'dt': datetime.datetime(2017, 9, 21, 6, 0), 'equity': 96130.0}, {'dt': datetime.datetime(2017, 9, 21, 22, 0), 'equity': 96150.0}, {'dt': datetime.datetime(2017, 9, 22, 6, 0), 'equity': 96000.0}, {'dt': datetime.datetime(2017, 9, 25, 2, 0), 'equity': 95820.0}, {'dt': datetime.datetime(2017, 9, 27, 6, 0), 'equity': 96210.0}, {'dt': datetime.datetime(2017, 9, 27, 14, 0), 'equity': 96010.0}, {'dt': datetime.datetime(2017, 9, 28, 14, 0), 'equity': 95450.0}, {'dt': datetime.datetime(2017, 10, 2, 6, 0), 'equity': 95230.0}, {'dt': datetime.datetime(2017, 10, 6, 10, 0), 'equity': 94550.0}, {'dt': datetime.datetime(2017, 10, 9, 18, 0), 'equity': 94420.0}, {'dt': datetime.datetime(2017, 10, 11, 22, 0), 'equity': 95750.0}, {'dt': datetime.datetime(2017, 10, 17, 2, 0), 'equity': 96640.0}, {'dt': datetime.datetime(2017, 10, 17, 14, 0), 'equity': 96220.0}, {'dt': datetime.datetime(2017, 10, 19, 2, 0), 'equity': 96280.0}, {'dt': datetime.datetime(2017, 10, 24, 6, 0), 'equity': 96560.0}, {'dt': datetime.datetime(2017, 10, 25, 14, 0), 'equity': 96330.0}, {'dt': datetime.datetime(2017, 10, 31, 10, 0), 'equity': 97740.0}, {'dt': datetime.datetime(2017, 11, 1, 14, 0), 'equity': 97240.0}, {'dt': datetime.datetime(2017, 11, 7, 18, 0), 'equity': 99470.0}, {'dt': datetime.datetime(2017, 11, 10, 14, 0), 'equity': 99430.0}, {'dt': datetime.datetime(2017, 11, 16, 10, 0), 'equity': 99060.0}, {'dt': datetime.datetime(2017, 11, 20, 10, 0), 'equity': 99790.0}, {'dt': datetime.datetime(2017, 11, 27, 6, 0), 'equity': 101730.0}, {'dt': datetime.datetime(2017, 11, 29, 14, 0), 'equity': 100870.0}, {'dt': datetime.datetime(2017, 11, 30, 14, 0), 'equity': 100160.0}, {'dt': datetime.datetime(2017, 12, 4, 6, 0), 'equity': 100440.0}, {'dt': datetime.datetime(2017, 12, 5, 18, 0), 'equity': 100210.0}, {'dt': datetime.datetime(2017, 12, 12, 10, 0), 'equity': 101290.0}, {'dt': datetime.datetime(2017, 12, 18, 14, 0), 'equity': 101080.0}, {'dt': datetime.datetime(2017, 12, 19, 10, 0), 'equity': 101080.0}, {'dt': datetime.datetime(2017, 12, 21, 10, 0), 'equity': 101190.0}, {'dt': datetime.datetime(2017, 12, 28, 10, 0), 'equity': 102510.0}, {'dt': datetime.datetime(2018, 1, 2, 14, 0), 'equity': 103070.0}, {'dt': datetime.datetime(2018, 1, 5, 2, 0), 'equity': 104530.0}, {'dt': datetime.datetime(2018, 1, 8, 10, 0), 'equity': 104260.0}, {'dt': datetime.datetime(2018, 1, 11, 18, 0), 'equity': 106170.0}, {'dt': datetime.datetime(2018, 1, 16, 6, 0), 'equity': 106050.0}, {'dt': datetime.datetime(2018, 1, 18, 10, 0), 'equity': 105910.0}, {'dt': datetime.datetime(2018, 1, 18, 18, 0), 'equity': 105690.0}, {'dt': datetime.datetime(2018, 1, 22, 2, 0), 'equity': 105550.0}, {'dt': datetime.datetime(2018, 1, 25, 18, 0), 'equity': 107420.0}, {'dt': datetime.datetime(2018, 1, 29, 10, 0), 'equity': 107140.0}, {'dt': datetime.datetime(2018, 2, 2, 10, 0), 'equity': 107360.0}, {'dt': datetime.datetime(2018, 2, 4, 18, 0), 'equity': 106840.0}, {'dt': datetime.datetime(2018, 2, 6, 14, 0), 'equity': 106220.0}, {'dt': datetime.datetime(2018, 2, 7, 6, 0), 'equity': 105350.0}, {'dt': datetime.datetime(2018, 2, 7, 14, 0), 'equity': 102930.0}, {'dt': datetime.datetime(2018, 2, 12, 14, 0), 'equity': 102190.0}, {'dt': datetime.datetime(2018, 2, 20, 6, 0), 'equity': 104060.0}, {'dt': datetime.datetime(2018, 2, 26, 10, 0), 'equity': 105400.0}, {'dt': datetime.datetime(2018, 2, 27, 10, 0), 'equity': 105140.0}, {'dt': datetime.datetime(2018, 2, 28, 14, 0), 'equity': 104250.0}, {'dt': datetime.datetime(2018, 3, 6, 18, 0), 'equity': 105130.0}, {'dt': datetime.datetime(2018, 3, 12, 14, 0), 'equity': 105180.0}, {'dt': datetime.datetime(2018, 3, 13, 14, 0), 'equity': 103780.0}, {'dt': datetime.datetime(2018, 3, 16, 10, 0), 'equity': 103880.0}, {'dt': datetime.datetime(2018, 3, 22, 10, 0), 'equity': 106040.0}, {'dt': datetime.datetime(2018, 3, 23, 6, 0), 'equity': 105590.0}, {'dt': datetime.datetime(2018, 3, 27, 10, 0), 'equity': 105930.0}, {'dt': datetime.datetime(2018, 4, 2, 10, 0), 'equity': 104880.0}, {'dt': datetime.datetime(2018, 4, 4, 6, 0), 'equity': 103630.0}, {'dt': datetime.datetime(2018, 4, 5, 22, 0), 'equity': 103610.0}, {'dt': datetime.datetime(2018, 4, 6, 14, 0), 'equity': 101890.0}, {'dt': datetime.datetime(2018, 4, 15, 22, 0), 'equity': 105710.0}, {'dt': datetime.datetime(2018, 4, 19, 18, 0), 'equity': 107240.0}, {'dt': datetime.datetime(2018, 4, 23, 6, 0), 'equity': 106850.00000000001}, {'dt': datetime.datetime(2018, 4, 24, 14, 0), 'equity': 106280.00000000001}, {'dt': datetime.datetime(2018, 4, 26, 14, 0), 'equity': 106240.00000000001}, {'dt': datetime.datetime(2018, 4, 26, 22, 0), 'equity': 105970.00000000001}, {'dt': datetime.datetime(2018, 4, 29, 18, 0), 'equity': 105950.0}, {'dt': datetime.datetime(2018, 5, 1, 6, 0), 'equity': 105030.0}]}\n",
      "{'params': 15, 'profit': 10859.999999999985, 'ntrade': 122, 'equity': [{'dt': datetime.datetime(2017, 1, 9, 6, 0), 'equity': 99810.0}, {'dt': datetime.datetime(2017, 1, 13, 14, 0), 'equity': 99700.0}, {'dt': datetime.datetime(2017, 1, 17, 18, 0), 'equity': 98350.0}, {'dt': datetime.datetime(2017, 1, 18, 6, 0), 'equity': 97440.0}, {'dt': datetime.datetime(2017, 1, 23, 6, 0), 'equity': 97200.0}, {'dt': datetime.datetime(2017, 1, 24, 18, 0), 'equity': 97230.0}, {'dt': datetime.datetime(2017, 1, 25, 6, 0), 'equity': 96760.0}, {'dt': datetime.datetime(2017, 1, 26, 6, 0), 'equity': 96660.0}, {'dt': datetime.datetime(2017, 1, 27, 10, 0), 'equity': 95960.0}, {'dt': datetime.datetime(2017, 1, 30, 10, 0), 'equity': 95350.0}, {'dt': datetime.datetime(2017, 1, 31, 18, 0), 'equity': 94890.0}, {'dt': datetime.datetime(2017, 2, 6, 10, 0), 'equity': 95660.0}, {'dt': datetime.datetime(2017, 2, 13, 10, 0), 'equity': 96220.0}, {'dt': datetime.datetime(2017, 2, 14, 14, 0), 'equity': 95990.0}, {'dt': datetime.datetime(2017, 2, 15, 18, 0), 'equity': 95850.0}, {'dt': datetime.datetime(2017, 2, 17, 6, 0), 'equity': 95750.0}, {'dt': datetime.datetime(2017, 2, 22, 6, 0), 'equity': 95860.0}, {'dt': datetime.datetime(2017, 2, 24, 6, 0), 'equity': 95670.0}, {'dt': datetime.datetime(2017, 2, 27, 14, 0), 'equity': 95540.0}, {'dt': datetime.datetime(2017, 3, 1, 2, 0), 'equity': 95400.0}, {'dt': datetime.datetime(2017, 3, 1, 14, 0), 'equity': 95140.0}, {'dt': datetime.datetime(2017, 3, 7, 18, 0), 'equity': 94870.0}, {'dt': datetime.datetime(2017, 3, 17, 14, 0), 'equity': 94900.0}, {'dt': datetime.datetime(2017, 3, 21, 10, 0), 'equity': 94540.0}, {'dt': datetime.datetime(2017, 3, 23, 10, 0), 'equity': 93810.0}, {'dt': datetime.datetime(2017, 3, 24, 10, 0), 'equity': 93680.0}, {'dt': datetime.datetime(2017, 3, 26, 22, 0), 'equity': 93410.0}, {'dt': datetime.datetime(2017, 4, 3, 18, 0), 'equity': 95760.0}, {'dt': datetime.datetime(2017, 4, 6, 2, 0), 'equity': 95970.0}, {'dt': datetime.datetime(2017, 4, 12, 18, 0), 'equity': 97620.0}, {'dt': datetime.datetime(2017, 4, 13, 14, 0), 'equity': 97390.0}, {'dt': datetime.datetime(2017, 4, 26, 10, 0), 'equity': 97040.0}, {'dt': datetime.datetime(2017, 4, 26, 18, 0), 'equity': 96480.0}, {'dt': datetime.datetime(2017, 4, 27, 2, 0), 'equity': 96460.0}, {'dt': datetime.datetime(2017, 4, 28, 6, 0), 'equity': 96390.0}, {'dt': datetime.datetime(2017, 4, 28, 14, 0), 'equity': 96180.0}, {'dt': datetime.datetime(2017, 5, 1, 6, 0), 'equity': 96080.0}, {'dt': datetime.datetime(2017, 5, 8, 6, 0), 'equity': 95540.0}, {'dt': datetime.datetime(2017, 5, 9, 10, 0), 'equity': 95040.0}, {'dt': datetime.datetime(2017, 5, 16, 18, 0), 'equity': 96690.0}, {'dt': datetime.datetime(2017, 5, 18, 6, 0), 'equity': 96030.0}, {'dt': datetime.datetime(2017, 5, 23, 6, 0), 'equity': 97070.0}, {'dt': datetime.datetime(2017, 5, 25, 6, 0), 'equity': 96840.0}, {'dt': datetime.datetime(2017, 5, 30, 10, 0), 'equity': 96310.0}, {'dt': datetime.datetime(2017, 5, 30, 22, 0), 'equity': 96200.0}, {'dt': datetime.datetime(2017, 6, 5, 6, 0), 'equity': 95760.0}, {'dt': datetime.datetime(2017, 6, 7, 14, 0), 'equity': 93780.0}, {'dt': datetime.datetime(2017, 6, 13, 10, 0), 'equity': 93620.0}, {'dt': datetime.datetime(2017, 6, 13, 18, 0), 'equity': 93270.0}, {'dt': datetime.datetime(2017, 6, 19, 14, 0), 'equity': 93130.0}, {'dt': datetime.datetime(2017, 6, 23, 6, 0), 'equity': 93000.0}, {'dt': datetime.datetime(2017, 7, 5, 6, 0), 'equity': 96330.0}, {'dt': datetime.datetime(2017, 7, 11, 6, 0), 'equity': 95860.0}, {'dt': datetime.datetime(2017, 7, 13, 6, 0), 'equity': 95940.0}, {'dt': datetime.datetime(2017, 7, 17, 14, 0), 'equity': 96230.0}, {'dt': datetime.datetime(2017, 7, 18, 14, 0), 'equity': 95840.0}, {'dt': datetime.datetime(2017, 7, 20, 18, 0), 'equity': 96040.0}, {'dt': datetime.datetime(2017, 7, 21, 10, 0), 'equity': 95430.0}, {'dt': datetime.datetime(2017, 8, 1, 10, 0), 'equity': 98510.0}, {'dt': datetime.datetime(2017, 8, 2, 22, 0), 'equity': 98360.0}, {'dt': datetime.datetime(2017, 8, 3, 14, 0), 'equity': 97860.0}, {'dt': datetime.datetime(2017, 8, 7, 6, 0), 'equity': 97350.0}, {'dt': datetime.datetime(2017, 8, 8, 10, 0), 'equity': 97140.0}, {'dt': datetime.datetime(2017, 8, 10, 14, 0), 'equity': 96520.0}, {'dt': datetime.datetime(2017, 8, 14, 14, 0), 'equity': 95400.0}, {'dt': datetime.datetime(2017, 8, 18, 10, 0), 'equity': 95090.0}, {'dt': datetime.datetime(2017, 8, 21, 14, 0), 'equity': 93890.0}, {'dt': datetime.datetime(2017, 8, 22, 14, 0), 'equity': 93540.0}, {'dt': datetime.datetime(2017, 8, 24, 10, 0), 'equity': 92990.0}, {'dt': datetime.datetime(2017, 9, 8, 6, 0), 'equity': 95300.0}, {'dt': datetime.datetime(2017, 9, 18, 18, 0), 'equity': 96980.0}, {'dt': datetime.datetime(2017, 9, 19, 14, 0), 'equity': 96080.0}, {'dt': datetime.datetime(2017, 9, 21, 10, 0), 'equity': 95870.0}, {'dt': datetime.datetime(2017, 9, 22, 6, 0), 'equity': 95810.0}, {'dt': datetime.datetime(2017, 9, 24, 22, 0), 'equity': 95700.0}, {'dt': datetime.datetime(2017, 9, 27, 14, 0), 'equity': 97000.0}, {'dt': datetime.datetime(2017, 9, 27, 22, 0), 'equity': 96930.0}, {'dt': datetime.datetime(2017, 9, 28, 14, 0), 'equity': 96380.0}, {'dt': datetime.datetime(2017, 10, 6, 10, 0), 'equity': 95390.0}, {'dt': datetime.datetime(2017, 10, 12, 10, 0), 'equity': 95720.0}, {'dt': datetime.datetime(2017, 10, 17, 14, 0), 'equity': 96450.0}, {'dt': datetime.datetime(2017, 10, 19, 6, 0), 'equity': 95860.0}, {'dt': datetime.datetime(2017, 10, 25, 14, 0), 'equity': 95840.0}, {'dt': datetime.datetime(2017, 10, 26, 10, 0), 'equity': 95710.0}, {'dt': datetime.datetime(2017, 11, 1, 14, 0), 'equity': 97170.0}, {'dt': datetime.datetime(2017, 11, 8, 10, 0), 'equity': 99280.0}, {'dt': datetime.datetime(2017, 11, 8, 18, 0), 'equity': 99090.0}, {'dt': datetime.datetime(2017, 11, 10, 14, 0), 'equity': 98740.0}, {'dt': datetime.datetime(2017, 11, 27, 10, 0), 'equity': 101300.0}, {'dt': datetime.datetime(2017, 11, 30, 14, 0), 'equity': 100590.0}, {'dt': datetime.datetime(2017, 12, 4, 10, 0), 'equity': 100670.0}, {'dt': datetime.datetime(2017, 12, 12, 14, 0), 'equity': 100740.0}, {'dt': datetime.datetime(2017, 12, 18, 14, 0), 'equity': 100530.0}, {'dt': datetime.datetime(2017, 12, 21, 10, 0), 'equity': 100870.0}, {'dt': datetime.datetime(2018, 1, 5, 6, 0), 'equity': 104100.0}, {'dt': datetime.datetime(2018, 1, 5, 14, 0), 'equity': 103940.0}, {'dt': datetime.datetime(2018, 1, 8, 10, 0), 'equity': 103670.0}, {'dt': datetime.datetime(2018, 1, 12, 2, 0), 'equity': 105170.0}, {'dt': datetime.datetime(2018, 1, 16, 6, 0), 'equity': 105050.0}, {'dt': datetime.datetime(2018, 1, 18, 2, 0), 'equity': 104960.0}, {'dt': datetime.datetime(2018, 1, 18, 18, 0), 'equity': 104740.0}, {'dt': datetime.datetime(2018, 1, 29, 10, 0), 'equity': 106420.0}, {'dt': datetime.datetime(2018, 2, 2, 10, 0), 'equity': 106310.0}, {'dt': datetime.datetime(2018, 2, 4, 18, 0), 'equity': 105790.0}, {'dt': datetime.datetime(2018, 2, 20, 10, 0), 'equity': 107450.0}, {'dt': datetime.datetime(2018, 2, 20, 18, 0), 'equity': 107080.0}, {'dt': datetime.datetime(2018, 2, 27, 14, 0), 'equity': 108180.0}, {'dt': datetime.datetime(2018, 3, 7, 2, 0), 'equity': 108710.0}, {'dt': datetime.datetime(2018, 3, 7, 10, 0), 'equity': 108540.0}, {'dt': datetime.datetime(2018, 3, 13, 14, 0), 'equity': 107890.0}, {'dt': datetime.datetime(2018, 3, 22, 18, 0), 'equity': 111040.0}, {'dt': datetime.datetime(2018, 3, 27, 10, 0), 'equity': 111420.0}, {'dt': datetime.datetime(2018, 4, 2, 10, 0), 'equity': 110370.0}, {'dt': datetime.datetime(2018, 4, 5, 22, 0), 'equity': 109890.0}, {'dt': datetime.datetime(2018, 4, 6, 14, 0), 'equity': 108170.0}, {'dt': datetime.datetime(2018, 4, 15, 22, 0), 'equity': 111990.0}, {'dt': datetime.datetime(2018, 4, 20, 10, 0), 'equity': 112980.0}, {'dt': datetime.datetime(2018, 4, 24, 14, 0), 'equity': 112410.0}, {'dt': datetime.datetime(2018, 4, 26, 14, 0), 'equity': 112070.0}, {'dt': datetime.datetime(2018, 4, 26, 22, 0), 'equity': 111800.0}, {'dt': datetime.datetime(2018, 4, 29, 18, 0), 'equity': 111779.99999999999}, {'dt': datetime.datetime(2018, 5, 1, 6, 0), 'equity': 110859.99999999999}]}\n",
      "{'params': 20, 'profit': 6929.999999999985, 'ntrade': 110, 'equity': [{'dt': datetime.datetime(2017, 1, 9, 6, 0), 'equity': 99520.0}, {'dt': datetime.datetime(2017, 1, 16, 10, 0), 'equity': 99240.0}, {'dt': datetime.datetime(2017, 1, 16, 22, 0), 'equity': 99220.0}, {'dt': datetime.datetime(2017, 1, 17, 18, 0), 'equity': 97870.0}, {'dt': datetime.datetime(2017, 1, 23, 6, 0), 'equity': 96980.0}, {'dt': datetime.datetime(2017, 1, 25, 6, 0), 'equity': 96660.0}, {'dt': datetime.datetime(2017, 1, 26, 6, 0), 'equity': 96330.0}, {'dt': datetime.datetime(2017, 1, 27, 10, 0), 'equity': 95630.0}, {'dt': datetime.datetime(2017, 1, 30, 10, 0), 'equity': 95020.0}, {'dt': datetime.datetime(2017, 1, 31, 14, 0), 'equity': 94810.0}, {'dt': datetime.datetime(2017, 2, 6, 14, 0), 'equity': 94910.0}, {'dt': datetime.datetime(2017, 2, 13, 14, 0), 'equity': 94860.0}, {'dt': datetime.datetime(2017, 2, 14, 14, 0), 'equity': 94840.0}, {'dt': datetime.datetime(2017, 2, 17, 6, 0), 'equity': 94740.0}, {'dt': datetime.datetime(2017, 2, 22, 6, 0), 'equity': 95180.0}, {'dt': datetime.datetime(2017, 2, 23, 2, 0), 'equity': 95160.0}, {'dt': datetime.datetime(2017, 2, 24, 6, 0), 'equity': 94970.0}, {'dt': datetime.datetime(2017, 2, 27, 18, 0), 'equity': 94710.0}, {'dt': datetime.datetime(2017, 3, 1, 2, 0), 'equity': 94570.0}, {'dt': datetime.datetime(2017, 3, 1, 14, 0), 'equity': 94310.0}, {'dt': datetime.datetime(2017, 3, 7, 18, 0), 'equity': 93860.0}, {'dt': datetime.datetime(2017, 3, 19, 22, 0), 'equity': 93780.0}, {'dt': datetime.datetime(2017, 3, 21, 10, 0), 'equity': 93420.0}, {'dt': datetime.datetime(2017, 3, 26, 22, 0), 'equity': 93150.0}, {'dt': datetime.datetime(2017, 4, 4, 2, 0), 'equity': 95200.0}, {'dt': datetime.datetime(2017, 4, 12, 18, 0), 'equity': 97440.0}, {'dt': datetime.datetime(2017, 4, 13, 14, 0), 'equity': 97280.0}, {'dt': datetime.datetime(2017, 4, 26, 18, 0), 'equity': 96720.0}, {'dt': datetime.datetime(2017, 4, 28, 6, 0), 'equity': 96650.0}, {'dt': datetime.datetime(2017, 4, 28, 14, 0), 'equity': 96440.0}, {'dt': datetime.datetime(2017, 5, 8, 6, 0), 'equity': 95840.0}, {'dt': datetime.datetime(2017, 5, 9, 10, 0), 'equity': 95340.0}, {'dt': datetime.datetime(2017, 5, 10, 2, 0), 'equity': 95250.0}, {'dt': datetime.datetime(2017, 5, 16, 18, 0), 'equity': 97150.0}, {'dt': datetime.datetime(2017, 5, 18, 6, 0), 'equity': 96880.0}, {'dt': datetime.datetime(2017, 5, 25, 6, 0), 'equity': 98190.0}, {'dt': datetime.datetime(2017, 5, 31, 2, 0), 'equity': 97880.0}, {'dt': datetime.datetime(2017, 6, 7, 14, 0), 'equity': 95900.0}, {'dt': datetime.datetime(2017, 6, 13, 10, 0), 'equity': 95410.0}, {'dt': datetime.datetime(2017, 6, 13, 18, 0), 'equity': 95060.0}, {'dt': datetime.datetime(2017, 6, 14, 14, 0), 'equity': 93690.0}, {'dt': datetime.datetime(2017, 6, 19, 14, 0), 'equity': 93220.0}, {'dt': datetime.datetime(2017, 7, 5, 6, 0), 'equity': 96550.0}, {'dt': datetime.datetime(2017, 7, 17, 18, 0), 'equity': 97430.0}, {'dt': datetime.datetime(2017, 7, 18, 2, 0), 'equity': 97280.0}, {'dt': datetime.datetime(2017, 7, 18, 14, 0), 'equity': 97330.0}, {'dt': datetime.datetime(2017, 7, 21, 10, 0), 'equity': 97120.0}, {'dt': datetime.datetime(2017, 8, 1, 14, 0), 'equity': 99420.0}, {'dt': datetime.datetime(2017, 8, 2, 22, 0), 'equity': 99270.0}, {'dt': datetime.datetime(2017, 8, 3, 14, 0), 'equity': 98770.0}, {'dt': datetime.datetime(2017, 8, 7, 6, 0), 'equity': 98260.0}, {'dt': datetime.datetime(2017, 8, 8, 10, 0), 'equity': 98050.0}, {'dt': datetime.datetime(2017, 8, 10, 14, 0), 'equity': 97430.0}, {'dt': datetime.datetime(2017, 8, 14, 14, 0), 'equity': 96310.0}, {'dt': datetime.datetime(2017, 8, 18, 10, 0), 'equity': 96000.0}, {'dt': datetime.datetime(2017, 8, 21, 14, 0), 'equity': 94800.0}, {'dt': datetime.datetime(2017, 8, 22, 14, 0), 'equity': 94900.0}, {'dt': datetime.datetime(2017, 8, 24, 10, 0), 'equity': 94350.0}, {'dt': datetime.datetime(2017, 9, 8, 14, 0), 'equity': 95190.0}, {'dt': datetime.datetime(2017, 9, 19, 2, 0), 'equity': 96560.0}, {'dt': datetime.datetime(2017, 9, 19, 14, 0), 'equity': 95660.0}, {'dt': datetime.datetime(2017, 9, 21, 10, 0), 'equity': 95450.0}, {'dt': datetime.datetime(2017, 9, 25, 2, 0), 'equity': 95380.0}, {'dt': datetime.datetime(2017, 9, 28, 14, 0), 'equity': 96300.0}, {'dt': datetime.datetime(2017, 10, 6, 10, 0), 'equity': 95310.0}, {'dt': datetime.datetime(2017, 10, 12, 10, 0), 'equity': 95640.0}, {'dt': datetime.datetime(2017, 10, 19, 6, 0), 'equity': 96260.0}, {'dt': datetime.datetime(2017, 10, 23, 6, 0), 'equity': 96020.0}, {'dt': datetime.datetime(2017, 10, 25, 14, 0), 'equity': 95910.0}, {'dt': datetime.datetime(2017, 10, 25, 22, 0), 'equity': 95810.0}, {'dt': datetime.datetime(2017, 10, 26, 10, 0), 'equity': 95680.0}, {'dt': datetime.datetime(2017, 11, 1, 14, 0), 'equity': 97140.0}, {'dt': datetime.datetime(2017, 11, 2, 2, 0), 'equity': 97120.0}, {'dt': datetime.datetime(2017, 11, 2, 10, 0), 'equity': 97070.0}, {'dt': datetime.datetime(2017, 11, 9, 6, 0), 'equity': 99530.0}, {'dt': datetime.datetime(2017, 11, 9, 18, 0), 'equity': 99320.0}, {'dt': datetime.datetime(2017, 11, 10, 14, 0), 'equity': 99140.0}, {'dt': datetime.datetime(2017, 11, 27, 10, 0), 'equity': 101090.0}, {'dt': datetime.datetime(2017, 11, 30, 10, 0), 'equity': 100930.0}, {'dt': datetime.datetime(2017, 12, 4, 10, 0), 'equity': 100850.0}, {'dt': datetime.datetime(2017, 12, 12, 14, 0), 'equity': 100920.0}, {'dt': datetime.datetime(2017, 12, 13, 10, 0), 'equity': 100660.0}, {'dt': datetime.datetime(2017, 12, 18, 14, 0), 'equity': 100290.0}, {'dt': datetime.datetime(2018, 1, 8, 10, 0), 'equity': 104440.0}, {'dt': datetime.datetime(2018, 1, 16, 6, 0), 'equity': 106510.0}, {'dt': datetime.datetime(2018, 1, 16, 14, 0), 'equity': 106260.0}, {'dt': datetime.datetime(2018, 1, 18, 2, 0), 'equity': 105990.0}, {'dt': datetime.datetime(2018, 1, 29, 10, 0), 'equity': 107670.0}, {'dt': datetime.datetime(2018, 2, 2, 10, 0), 'equity': 107030.0}, {'dt': datetime.datetime(2018, 2, 4, 22, 0), 'equity': 106130.0}, {'dt': datetime.datetime(2018, 2, 5, 10, 0), 'equity': 105520.0}, {'dt': datetime.datetime(2018, 2, 20, 18, 0), 'equity': 107170.0}, {'dt': datetime.datetime(2018, 2, 27, 14, 0), 'equity': 108270.0}, {'dt': datetime.datetime(2018, 3, 5, 10, 0), 'equity': 108040.0}, {'dt': datetime.datetime(2018, 3, 7, 14, 0), 'equity': 106690.0}, {'dt': datetime.datetime(2018, 3, 12, 14, 0), 'equity': 106020.0}, {'dt': datetime.datetime(2018, 3, 13, 14, 0), 'equity': 105110.0}, {'dt': datetime.datetime(2018, 3, 27, 14, 0), 'equity': 108830.0}, {'dt': datetime.datetime(2018, 4, 1, 18, 0), 'equity': 108540.0}, {'dt': datetime.datetime(2018, 4, 2, 10, 0), 'equity': 107490.0}, {'dt': datetime.datetime(2018, 4, 5, 6, 0), 'equity': 107260.0}, {'dt': datetime.datetime(2018, 4, 5, 22, 0), 'equity': 106480.0}, {'dt': datetime.datetime(2018, 4, 6, 14, 0), 'equity': 104760.0}, {'dt': datetime.datetime(2018, 4, 16, 6, 0), 'equity': 108280.0}, {'dt': datetime.datetime(2018, 4, 20, 10, 0), 'equity': 109149.99999999999}, {'dt': datetime.datetime(2018, 4, 23, 6, 0), 'equity': 108780.0}, {'dt': datetime.datetime(2018, 4, 24, 14, 0), 'equity': 108210.0}, {'dt': datetime.datetime(2018, 4, 26, 14, 0), 'equity': 107870.0}, {'dt': datetime.datetime(2018, 4, 29, 18, 0), 'equity': 107849.99999999999}, {'dt': datetime.datetime(2018, 5, 1, 6, 0), 'equity': 106929.99999999999}]}\n",
      "{'params': 25, 'profit': 8470.0, 'ntrade': 88, 'equity': [{'dt': datetime.datetime(2017, 1, 9, 6, 0), 'equity': 99380.0}, {'dt': datetime.datetime(2017, 1, 17, 2, 0), 'equity': 99040.0}, {'dt': datetime.datetime(2017, 1, 17, 18, 0), 'equity': 97690.0}, {'dt': datetime.datetime(2017, 1, 23, 6, 0), 'equity': 96800.0}, {'dt': datetime.datetime(2017, 1, 25, 6, 0), 'equity': 96480.0}, {'dt': datetime.datetime(2017, 1, 26, 6, 0), 'equity': 96380.0}, {'dt': datetime.datetime(2017, 1, 27, 10, 0), 'equity': 95680.0}, {'dt': datetime.datetime(2017, 1, 29, 22, 0), 'equity': 95540.0}, {'dt': datetime.datetime(2017, 1, 30, 10, 0), 'equity': 94930.0}, {'dt': datetime.datetime(2017, 1, 31, 14, 0), 'equity': 94720.0}, {'dt': datetime.datetime(2017, 2, 6, 14, 0), 'equity': 94600.0}, {'dt': datetime.datetime(2017, 2, 13, 18, 0), 'equity': 94610.0}, {'dt': datetime.datetime(2017, 2, 14, 2, 0), 'equity': 94440.0}, {'dt': datetime.datetime(2017, 2, 14, 18, 0), 'equity': 94110.0}, {'dt': datetime.datetime(2017, 2, 17, 6, 0), 'equity': 93750.0}, {'dt': datetime.datetime(2017, 2, 22, 10, 0), 'equity': 93720.0}, {'dt': datetime.datetime(2017, 2, 24, 6, 0), 'equity': 93760.0}, {'dt': datetime.datetime(2017, 2, 27, 14, 0), 'equity': 93630.0}, {'dt': datetime.datetime(2017, 3, 1, 14, 0), 'equity': 93370.0}, {'dt': datetime.datetime(2017, 3, 7, 14, 0), 'equity': 93200.0}, {'dt': datetime.datetime(2017, 3, 19, 22, 0), 'equity': 92660.0}, {'dt': datetime.datetime(2017, 3, 21, 10, 0), 'equity': 92300.0}, {'dt': datetime.datetime(2017, 4, 13, 14, 0), 'equity': 97330.0}, {'dt': datetime.datetime(2017, 4, 26, 18, 0), 'equity': 96770.0}, {'dt': datetime.datetime(2017, 4, 28, 6, 0), 'equity': 96550.0}, {'dt': datetime.datetime(2017, 4, 28, 14, 0), 'equity': 96340.0}, {'dt': datetime.datetime(2017, 5, 16, 18, 0), 'equity': 98240.0}, {'dt': datetime.datetime(2017, 5, 18, 6, 0), 'equity': 97970.0}, {'dt': datetime.datetime(2017, 5, 25, 6, 0), 'equity': 99850.0}, {'dt': datetime.datetime(2017, 6, 7, 10, 0), 'equity': 99650.0}, {'dt': datetime.datetime(2017, 6, 13, 10, 0), 'equity': 99240.0}, {'dt': datetime.datetime(2017, 6, 13, 18, 0), 'equity': 98890.0}, {'dt': datetime.datetime(2017, 6, 14, 14, 0), 'equity': 97520.0}, {'dt': datetime.datetime(2017, 7, 5, 10, 0), 'equity': 100120.0}, {'dt': datetime.datetime(2017, 7, 17, 18, 0), 'equity': 101000.0}, {'dt': datetime.datetime(2017, 7, 18, 2, 0), 'equity': 100850.0}, {'dt': datetime.datetime(2017, 7, 21, 10, 0), 'equity': 100960.0}, {'dt': datetime.datetime(2017, 8, 1, 14, 0), 'equity': 103060.0}, {'dt': datetime.datetime(2017, 8, 2, 22, 0), 'equity': 102910.0}, {'dt': datetime.datetime(2017, 8, 3, 14, 0), 'equity': 102410.0}, {'dt': datetime.datetime(2017, 8, 7, 6, 0), 'equity': 101610.0}, {'dt': datetime.datetime(2017, 8, 8, 10, 0), 'equity': 101510.0}, {'dt': datetime.datetime(2017, 8, 10, 14, 0), 'equity': 100890.0}, {'dt': datetime.datetime(2017, 8, 14, 14, 0), 'equity': 99770.0}, {'dt': datetime.datetime(2017, 8, 21, 14, 0), 'equity': 98570.0}, {'dt': datetime.datetime(2017, 8, 22, 18, 0), 'equity': 98520.0}, {'dt': datetime.datetime(2017, 8, 24, 10, 0), 'equity': 97970.0}, {'dt': datetime.datetime(2017, 8, 27, 22, 0), 'equity': 97780.0}, {'dt': datetime.datetime(2017, 9, 8, 14, 0), 'equity': 97840.0}, {'dt': datetime.datetime(2017, 9, 19, 14, 0), 'equity': 98430.0}, {'dt': datetime.datetime(2017, 9, 21, 10, 0), 'equity': 98220.0}, {'dt': datetime.datetime(2017, 9, 25, 2, 0), 'equity': 98150.0}, {'dt': datetime.datetime(2017, 9, 28, 14, 0), 'equity': 99070.0}, {'dt': datetime.datetime(2017, 10, 6, 10, 0), 'equity': 97880.0}, {'dt': datetime.datetime(2017, 10, 19, 6, 0), 'equity': 99270.0}, {'dt': datetime.datetime(2017, 10, 23, 6, 0), 'equity': 99030.0}, {'dt': datetime.datetime(2017, 10, 23, 18, 0), 'equity': 98760.0}, {'dt': datetime.datetime(2017, 11, 10, 14, 0), 'equity': 103630.0}, {'dt': datetime.datetime(2017, 11, 27, 18, 0), 'equity': 105370.0}, {'dt': datetime.datetime(2017, 12, 4, 10, 0), 'equity': 105290.0}, {'dt': datetime.datetime(2017, 12, 5, 18, 0), 'equity': 105060.0}, {'dt': datetime.datetime(2017, 12, 13, 10, 0), 'equity': 105170.0}, {'dt': datetime.datetime(2017, 12, 18, 14, 0), 'equity': 104750.0}, {'dt': datetime.datetime(2018, 1, 16, 14, 0), 'equity': 111270.0}, {'dt': datetime.datetime(2018, 1, 18, 2, 0), 'equity': 111180.0}, {'dt': datetime.datetime(2018, 1, 29, 14, 0), 'equity': 112780.0}, {'dt': datetime.datetime(2018, 2, 2, 10, 0), 'equity': 112140.0}, {'dt': datetime.datetime(2018, 2, 4, 22, 0), 'equity': 111240.0}, {'dt': datetime.datetime(2018, 2, 5, 10, 0), 'equity': 110630.0}, {'dt': datetime.datetime(2018, 2, 20, 22, 0), 'equity': 111990.0}, {'dt': datetime.datetime(2018, 2, 27, 18, 0), 'equity': 112900.0}, {'dt': datetime.datetime(2018, 2, 28, 14, 0), 'equity': 112010.0}, {'dt': datetime.datetime(2018, 3, 7, 14, 0), 'equity': 110660.0}, {'dt': datetime.datetime(2018, 3, 12, 14, 0), 'equity': 109990.0}, {'dt': datetime.datetime(2018, 3, 13, 14, 0), 'equity': 109120.0}, {'dt': datetime.datetime(2018, 3, 15, 18, 0), 'equity': 108790.0}, {'dt': datetime.datetime(2018, 3, 16, 10, 0), 'equity': 108670.0}, {'dt': datetime.datetime(2018, 3, 27, 18, 0), 'equity': 111030.0}, {'dt': datetime.datetime(2018, 4, 1, 18, 0), 'equity': 110740.0}, {'dt': datetime.datetime(2018, 4, 2, 10, 0), 'equity': 109690.0}, {'dt': datetime.datetime(2018, 4, 5, 14, 0), 'equity': 109220.0}, {'dt': datetime.datetime(2018, 4, 5, 22, 0), 'equity': 108640.0}, {'dt': datetime.datetime(2018, 4, 6, 14, 0), 'equity': 106920.0}, {'dt': datetime.datetime(2018, 4, 16, 14, 0), 'equity': 109860.0}, {'dt': datetime.datetime(2018, 4, 23, 10, 0), 'equity': 110300.0}, {'dt': datetime.datetime(2018, 4, 24, 14, 0), 'equity': 109730.0}, {'dt': datetime.datetime(2018, 4, 26, 14, 0), 'equity': 109390.0}, {'dt': datetime.datetime(2018, 5, 1, 6, 0), 'equity': 108470.0}]}\n",
      "{'params': 30, 'profit': 10389.999999999985, 'ntrade': 84, 'equity': [{'dt': datetime.datetime(2017, 1, 13, 6, 0), 'equity': 99750.0}, {'dt': datetime.datetime(2017, 1, 18, 6, 0), 'equity': 98660.0}, {'dt': datetime.datetime(2017, 1, 23, 6, 0), 'equity': 97770.0}, {'dt': datetime.datetime(2017, 1, 23, 18, 0), 'equity': 97710.0}, {'dt': datetime.datetime(2017, 1, 25, 6, 0), 'equity': 97340.0}, {'dt': datetime.datetime(2017, 1, 27, 10, 0), 'equity': 97440.0}, {'dt': datetime.datetime(2017, 1, 29, 22, 0), 'equity': 97300.0}, {'dt': datetime.datetime(2017, 1, 30, 10, 0), 'equity': 96690.0}, {'dt': datetime.datetime(2017, 1, 31, 14, 0), 'equity': 96480.0}, {'dt': datetime.datetime(2017, 2, 6, 14, 0), 'equity': 96360.0}, {'dt': datetime.datetime(2017, 2, 14, 22, 0), 'equity': 96200.0}, {'dt': datetime.datetime(2017, 2, 15, 14, 0), 'equity': 96200.0}, {'dt': datetime.datetime(2017, 2, 17, 6, 0), 'equity': 95840.0}, {'dt': datetime.datetime(2017, 2, 22, 10, 0), 'equity': 95480.0}, {'dt': datetime.datetime(2017, 2, 24, 10, 0), 'equity': 95400.0}, {'dt': datetime.datetime(2017, 2, 27, 14, 0), 'equity': 95270.0}, {'dt': datetime.datetime(2017, 3, 1, 2, 0), 'equity': 95130.0}, {'dt': datetime.datetime(2017, 3, 1, 14, 0), 'equity': 94870.0}, {'dt': datetime.datetime(2017, 3, 7, 14, 0), 'equity': 94460.0}, {'dt': datetime.datetime(2017, 3, 19, 22, 0), 'equity': 93920.0}, {'dt': datetime.datetime(2017, 3, 21, 2, 0), 'equity': 93890.0}, {'dt': datetime.datetime(2017, 3, 21, 10, 0), 'equity': 93530.0}, {'dt': datetime.datetime(2017, 4, 16, 22, 0), 'equity': 98320.0}, {'dt': datetime.datetime(2017, 4, 17, 14, 0), 'equity': 97970.0}, {'dt': datetime.datetime(2017, 4, 28, 6, 0), 'equity': 97750.0}, {'dt': datetime.datetime(2017, 4, 28, 14, 0), 'equity': 97540.0}, {'dt': datetime.datetime(2017, 5, 18, 6, 0), 'equity': 99220.0}, {'dt': datetime.datetime(2017, 5, 25, 14, 0), 'equity': 99190.0}, {'dt': datetime.datetime(2017, 6, 7, 10, 0), 'equity': 98850.0}, {'dt': datetime.datetime(2017, 6, 14, 14, 0), 'equity': 97480.0}, {'dt': datetime.datetime(2017, 6, 26, 10, 0), 'equity': 97130.0}, {'dt': datetime.datetime(2017, 7, 5, 14, 0), 'equity': 99060.0}, {'dt': datetime.datetime(2017, 7, 21, 10, 0), 'equity': 99610.0}, {'dt': datetime.datetime(2017, 8, 1, 14, 0), 'equity': 101710.0}, {'dt': datetime.datetime(2017, 8, 3, 14, 0), 'equity': 101580.0}, {'dt': datetime.datetime(2017, 8, 7, 6, 0), 'equity': 100780.0}, {'dt': datetime.datetime(2017, 8, 7, 22, 0), 'equity': 100730.0}, {'dt': datetime.datetime(2017, 8, 8, 10, 0), 'equity': 100580.0}, {'dt': datetime.datetime(2017, 8, 10, 14, 0), 'equity': 99960.0}, {'dt': datetime.datetime(2017, 8, 21, 14, 0), 'equity': 98760.0}, {'dt': datetime.datetime(2017, 8, 22, 18, 0), 'equity': 98710.0}, {'dt': datetime.datetime(2017, 8, 24, 14, 0), 'equity': 98450.0}, {'dt': datetime.datetime(2017, 9, 1, 6, 0), 'equity': 97760.0}, {'dt': datetime.datetime(2017, 9, 8, 14, 0), 'equity': 98360.0}, {'dt': datetime.datetime(2017, 9, 19, 14, 0), 'equity': 98950.0}, {'dt': datetime.datetime(2017, 9, 20, 2, 0), 'equity': 98880.0}, {'dt': datetime.datetime(2017, 9, 21, 10, 0), 'equity': 98670.0}, {'dt': datetime.datetime(2017, 9, 28, 14, 0), 'equity': 99590.0}, {'dt': datetime.datetime(2017, 9, 29, 2, 0), 'equity': 99460.0}, {'dt': datetime.datetime(2017, 10, 6, 6, 0), 'equity': 99220.0}, {'dt': datetime.datetime(2017, 10, 12, 10, 0), 'equity': 98900.0}, {'dt': datetime.datetime(2017, 10, 19, 6, 0), 'equity': 99700.0}, {'dt': datetime.datetime(2017, 10, 23, 6, 0), 'equity': 99460.0}, {'dt': datetime.datetime(2017, 10, 23, 14, 0), 'equity': 99220.0}, {'dt': datetime.datetime(2017, 11, 12, 22, 0), 'equity': 104040.0}, {'dt': datetime.datetime(2017, 11, 27, 22, 0), 'equity': 105670.0}, {'dt': datetime.datetime(2017, 12, 4, 10, 0), 'equity': 104730.0}, {'dt': datetime.datetime(2017, 12, 5, 18, 0), 'equity': 104500.0}, {'dt': datetime.datetime(2017, 12, 13, 14, 0), 'equity': 104160.0}, {'dt': datetime.datetime(2017, 12, 18, 10, 0), 'equity': 104160.0}, {'dt': datetime.datetime(2018, 1, 16, 14, 0), 'equity': 110680.0}, {'dt': datetime.datetime(2018, 1, 18, 2, 0), 'equity': 110590.0}, {'dt': datetime.datetime(2018, 1, 29, 22, 0), 'equity': 111960.0}, {'dt': datetime.datetime(2018, 2, 2, 10, 0), 'equity': 111320.0}, {'dt': datetime.datetime(2018, 2, 4, 18, 0), 'equity': 110800.0}, {'dt': datetime.datetime(2018, 2, 5, 10, 0), 'equity': 110190.0}, {'dt': datetime.datetime(2018, 2, 21, 18, 0), 'equity': 111550.0}, {'dt': datetime.datetime(2018, 2, 27, 22, 0), 'equity': 112310.0}, {'dt': datetime.datetime(2018, 2, 28, 14, 0), 'equity': 111770.0}, {'dt': datetime.datetime(2018, 3, 7, 14, 0), 'equity': 110420.0}, {'dt': datetime.datetime(2018, 3, 12, 10, 0), 'equity': 110120.0}, {'dt': datetime.datetime(2018, 3, 13, 14, 0), 'equity': 109030.0}, {'dt': datetime.datetime(2018, 3, 15, 18, 0), 'equity': 108700.0}, {'dt': datetime.datetime(2018, 3, 16, 10, 0), 'equity': 108460.0}, {'dt': datetime.datetime(2018, 3, 27, 18, 0), 'equity': 110820.0}, {'dt': datetime.datetime(2018, 4, 1, 18, 0), 'equity': 110530.0}, {'dt': datetime.datetime(2018, 4, 2, 10, 0), 'equity': 109480.0}, {'dt': datetime.datetime(2018, 4, 5, 14, 0), 'equity': 109010.0}, {'dt': datetime.datetime(2018, 4, 17, 6, 0), 'equity': 111680.0}, {'dt': datetime.datetime(2018, 4, 23, 10, 0), 'equity': 112240.0}, {'dt': datetime.datetime(2018, 4, 24, 14, 0), 'equity': 111670.0}, {'dt': datetime.datetime(2018, 4, 26, 14, 0), 'equity': 111330.0}, {'dt': datetime.datetime(2018, 4, 29, 18, 0), 'equity': 111309.99999999999}, {'dt': datetime.datetime(2018, 5, 1, 6, 0), 'equity': 110389.99999999999}]}\n"
     ]
    }
   ],
   "source": [
    "start_date = periods[0]['is'][0]\n",
    "end_date = periods[-1]['is'][1]\n",
    "print('Start/End: {} - {}'.format(start_date, end_date))\n",
    "\n",
    "cerebro = bt.Cerebro()\n",
    "\n",
    "strats = cerebro.optstrategy(\n",
    "    TestStrategy,\n",
    "    maperiod=range(10, 31, 5))\n",
    "\n",
    "cerebro.addanalyzer(DecisiveAnalyzer, _name='decisive')\n",
    "\n",
    "cerebro.optreturn = False\n",
    "cerebro.broker.setcash(100000.0)\n",
    "cerebro.addsizer(bt.sizers.FixedSize, stake=1000)\n",
    "cerebro.broker.setcommission(commission=0.0)\n",
    "\n",
    "data = bt.feeds.PandasData(dataname = df[start_date:end_date])\n",
    "cerebro.adddata(data)\n",
    "\n",
    "results = cerebro.run(maxcpus=1)\n",
    "for result in results:\n",
    "    r = result[0].analyzers.decisive.get_analysis()\n",
    "    print(r)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "best_oos_params = []\n",
    "for oos_is in periods:\n",
    "    start_date, end_date = oos_is['is']\n",
    "    run_num = oos_is['run']\n",
    "    print('RUN {} \\t START/END: {}/{}'.format(run_num, start_date, end_date))\n",
    "    cerebro = bt.Cerebro()\n",
    "\n",
    "    strats = cerebro.optstrategy(\n",
    "        TestStrategy,\n",
    "        maperiod=range(10, 31, 5))\n",
    "    \n",
    "    cerebro.addanalyzer(DecisiveAnalyzer, _name='decisive')\n",
    "\n",
    "    cerebro.optreturn = False\n",
    "    cerebro.broker.setcash(100000.0)\n",
    "    cerebro.addsizer(bt.sizers.FixedSize, stake=1000)\n",
    "    cerebro.broker.setcommission(commission=0.0)\n",
    "\n",
    "    data = bt.feeds.PandasData(dataname = df[start_date:end_date])\n",
    "    cerebro.adddata(data)\n",
    "\n",
    "    result = cerebro.run(maxcpus=1)\n",
    "    best_param, best_profit, best_trades, best_equity = best_result_from_cerebro_opti_run(result)\n",
    "\n",
    "    best_oos_params.append({'train_param': best_param, \n",
    "                                      'train_profit': best_profit, \n",
    "                                      'train_numtrades': best_trades, \n",
    "                                      'train_tradeslist': best_equity, \n",
    "                                      'train_period': oos_is['is'],\n",
    "                                      'test_period': oos_is['oos'],\n",
    "                                     })\n",
    "    \n",
    "    print('')\n",
    "\n",
    "print('The best OOS parameters are: {}'.format(pformat(best_oos_params)))\n",
    "print('Note: Must account for pre-allocation of bars for the period for a correct WFE calculation.  This current implementation is incorrect.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trades_list = np.asarray(best_oos_params[1]['train_tradeslist'])\n",
    "cumsum = trades_list.cumsum()\n",
    "plt.plot(cumsum)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Out-of-sample Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "run_num = 0\n",
    "for best in best_oos_params:\n",
    "    start_date, end_date = best['test_period']\n",
    "    print('RUN {} \\t START/END: {}/{}'.format(run_num, start_date, end_date))\n",
    "    cerebro = bt.Cerebro()\n",
    "\n",
    "    cerebro.addstrategy(TestStrategy, maperiod=best['train_param'])\n",
    "\n",
    "    \n",
    "    cerebro.addanalyzer(DecisiveAnalyzer, _name='decisive')\n",
    "\n",
    "    cerebro.broker.setcash(100000.0)\n",
    "    cerebro.addsizer(bt.sizers.FixedSize, stake=1000)\n",
    "    cerebro.broker.setcommission(commission=0.0)\n",
    "\n",
    "    data = bt.feeds.PandasData(dataname = df[start_date:end_date])\n",
    "    cerebro.adddata(data)\n",
    "\n",
    "    result = cerebro.run(maxcpus=1)\n",
    "    r = result[0].analyzers.decisive.get_analysis()\n",
    "    best_oos_params[run_num]['test_numtrades'] = r['ntrade']\n",
    "    best_oos_params[run_num]['test_tradeslist'] = r['trades']\n",
    "    best_oos_params[run_num]['test_profit'] = r['profit']\n",
    "    run_num += 1\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('The best OOS parameters are: {}'.format(pformat(best_oos_params)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Walkforward"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a Stratey\n",
    "class WalkforwardStrategy(bt.Strategy):\n",
    "\n",
    "    params = (\n",
    "        ('maperiod', 15),\n",
    "        ('printlog', False),\n",
    "        ('live', False),\n",
    "        ('walkforward', None),\n",
    "    )\n",
    "\n",
    "    def log(self, txt, dt=None, doprint=False):\n",
    "        ''' Logging function fot this strategy'''\n",
    "        if self.params.printlog or doprint:\n",
    "            dt = dt or self.datas[0].datetime.date(0)\n",
    "            print('%s, %s' % (dt.isoformat(), txt))\n",
    "\n",
    "    def __init__(self):\n",
    "        # Keep a reference to the \"close\" line in the data[0] dataseries\n",
    "        self.dataclose = self.datas[0].close\n",
    "\n",
    "        # To keep track of pending orders and buy price/commission\n",
    "        self.order = None\n",
    "        self.buyprice = None\n",
    "        self.buycomm = None\n",
    "\n",
    "        # Add a MovingAverageSimple indicator\n",
    "        self.sma = bt.indicators.SimpleMovingAverage(\n",
    "            self.datas[0], period=self.params.maperiod)\n",
    "        \n",
    "        # Trim the indicators if we are running live, just need the current one\n",
    "        if not self.params.live:\n",
    "            pass\n",
    "        \n",
    "        \n",
    "        self.current_row = None\n",
    "        self.wfsma = []\n",
    "        \n",
    "        if self.params.walkforward:\n",
    "            for run in self.params.walkforward:\n",
    "                self.wfsma.append({\n",
    "                    'sma': bt.indicators.SimpleMovingAverage(self.datas[0], period=run['train_param']),\n",
    "                    'test_period': run['test_period'],\n",
    "                    'train_param': run['train_param'],\n",
    "                }) \n",
    "\n",
    "        print(pformat(self.wfsma))\n",
    "        \n",
    "        \n",
    "\n",
    "    def notify_order(self, order):\n",
    "        if order.status in [order.Submitted, order.Accepted]:\n",
    "            # Buy/Sell order submitted/accepted to/by broker - Nothing to do\n",
    "            return\n",
    "\n",
    "        # Check if an order has been completed\n",
    "        # Attention: broker could reject order if not enough cash\n",
    "        if order.status in [order.Completed]:\n",
    "            if order.isbuy():\n",
    "                self.log(\n",
    "                    'BUY EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n",
    "                    (order.executed.price,\n",
    "                     order.executed.value,\n",
    "                     order.executed.comm))\n",
    "\n",
    "                self.buyprice = order.executed.price\n",
    "                self.buycomm = order.executed.comm\n",
    "            else:  # Sell\n",
    "                self.log('SELL EXECUTED, Price: %.2f, Cost: %.2f, Comm %.2f' %\n",
    "                         (order.executed.price,\n",
    "                          order.executed.value,\n",
    "                          order.executed.comm))\n",
    "\n",
    "            self.bar_executed = len(self)\n",
    "\n",
    "        elif order.status in [order.Canceled, order.Margin, order.Rejected]:\n",
    "            self.log('Order Canceled/Margin/Rejected')\n",
    "\n",
    "        # Write down: no pending order\n",
    "        self.order = None\n",
    "\n",
    "    def notify_trade(self, trade):\n",
    "        if not trade.isclosed:\n",
    "            return\n",
    "\n",
    "        self.log('OPERATION PROFIT, GROSS %.2f, NET %.2f' %\n",
    "                 (trade.pnl, trade.pnlcomm))\n",
    "\n",
    "    def next(self):\n",
    "\n",
    "        # Walk-forward logic\n",
    "        for row in self.wfsma:\n",
    "            start, end = row['test_period']\n",
    "            period_start = datetime.datetime.strptime(start, '%Y-%m-%d')\n",
    "            period_end = datetime.datetime.strptime(end, '%Y-%m-%d')\n",
    "            if self.datetime.datetime() >= period_start and self.datetime.datetime() < period_end:\n",
    "                self.current_row = row\n",
    "        \n",
    "        # Simply log the closing price of the series from the reference\n",
    "        self.log('Close, %.2f' % self.dataclose[0])\n",
    "\n",
    "        # Check if an order is pending ... if yes, we cannot send a 2nd one\n",
    "        if self.order:\n",
    "            return\n",
    "\n",
    "        # Check if we are in the market\n",
    "        if not self.position:\n",
    "\n",
    "            # Not yet ... we MIGHT BUY if ...\n",
    "            if self.dataclose[0] > self.current_row['sma'][0]:\n",
    "\n",
    "                # BUY, BUY, BUY!!! (with all possible default parameters)\n",
    "                self.log('BUY CREATE, %.2f' % self.dataclose[0])\n",
    "\n",
    "                # Keep track of the created order to avoid a 2nd order\n",
    "                self.order = self.buy()\n",
    "\n",
    "        else:\n",
    "\n",
    "            if self.dataclose[0] < self.current_row['sma'][0]:\n",
    "                # SELL, SELL, SELL!!! (with all possible default parameters)\n",
    "                self.log('SELL CREATE, %.2f' % self.dataclose[0])\n",
    "\n",
    "                # Keep track of the created order to avoid a 2nd order\n",
    "                self.order = self.sell()\n",
    "\n",
    "    def stop(self):\n",
    "        self.log('maperiod:%2d, %.2f' %\n",
    "                 (self.params.maperiod, self.broker.getvalue()), doprint=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a cerebro entity\n",
    "cerebro = bt.Cerebro()\n",
    "\n",
    "# Add a strategy\n",
    "cerebro.addstrategy(WalkforwardStrategy, \n",
    "                    maperiod=15, \n",
    "                    walkforward=best_oos_params,\n",
    "                    live=False)\n",
    "\n",
    "# Load data\n",
    "fname_symbol = 'CL'\n",
    "folder_name = '5min'\n",
    "suffix = '5min_20160103_20190405'\n",
    "\n",
    "df = pd.read_parquet(os.path.join('../data/processed/{}/'.format(folder_name), '{}_{}.parquet'.format(fname_symbol, suffix)))\n",
    "df = (df.resample('4h', label='left', base=18).agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'}))\n",
    "df.columns = [col_name.lower() for col_name in df.columns]\n",
    "df = df.dropna()\n",
    "\n",
    "# periods\n",
    "start_date = best_oos_params[0]['test_period'][0]\n",
    "end_date = best_oos_params[-1]['test_period'][0]\n",
    "\n",
    "print('Start: {} End: {}'.format(start_date, end_date))\n",
    "data = bt.feeds.PandasData(dataname = df[start_date:end_date])\n",
    "\n",
    "\n",
    "# Add the Data Feed to Cerebro\n",
    "cerebro.adddata(data)\n",
    "cerebro.addanalyzer(DecisiveAnalyzer, _name='decisive')\n",
    "\n",
    "# Set our desired cash start\n",
    "cerebro.broker.setcash(100000.0)\n",
    "cerebro.addsizer(bt.sizers.FixedSize, stake=1000)\n",
    "\n",
    "# Print out the starting conditions\n",
    "print('Starting Portfolio Value: %.2f' % cerebro.broker.getvalue())\n",
    "\n",
    "# Run over everything\n",
    "results = cerebro.run()\n",
    "\n",
    "# Print out the final result\n",
    "print('Final Portfolio Value: %.2f' % cerebro.broker.getvalue())\n",
    "r = results[0].analyzers.decisive.get_analysis()\n",
    "cumsum = np.asarray(r['trades']).cumsum()\n",
    "\n",
    "plt.figure(figsize=(10,5))\n",
    "plt.plot(cumsum)\n",
    "plt.title('Walkforward Equity Curve')\n",
    "plt.xlabel('Trades')\n",
    "plt.ylabel('Equity')\n",
    "\n",
    "# cerebro.plot(volume=False, iplot=False)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
